% Generated by roxygen2 (4.0.2): do not edit by hand
\name{logisticPCA}
\alias{logisticPCA}
\title{Logistic Principal Component Analysis}
\usage{
logisticPCA(x, k = 2, M = 4, quiet = TRUE, use_irlba = FALSE,
  max_iters = 1000, conv_criteria = 1e-05, random_start = FALSE, start_U,
  start_mu, main_effects = TRUE)
}
\arguments{
\item{x}{matrix with all binary entries}

\item{k}{number of principal components to return}

\item{M}{value to approximate the saturated model}

\item{quiet}{logical; whether the calculation should give feedback}

\item{use_irlba}{logical; if \code{TRUE}, the function uses the irlba package
to more quickly calculate the eigen-decomposition}

\item{max_iters}{number of maximum iterations}

\item{conv_criteria}{convergence criteria. The difference between average deviance
in successive iterations}

\item{random_start}{logical; whether to randomly inititalize the parameters. If \code{FALSE},
function will use an eigen-decomposition as starting value}

\item{start_U}{starting value for the orthogonal matrix}

\item{start_mu}{starting value for mu. Only used if \code{main_effects = TRUE}}

\item{main_effects}{logical; whether to include main effects in the model}
}
\value{
An S3 object of class \code{lpca} which is a list with the
following components:
\item{mu}{the main effects}
\item{U}{a \code{k}-dimentional orthonormal matrix with the loadings}
\item{PCs}{the princial components}
\item{M}{the same parameter as inputed}
\item{iters}{number of iterations required for convergence}
\item{loss_trace}{the loss trace of the algorithm. Should be non-increasing}
}
\description{
Dimension reduction for binary data by extending Pearson's
PCA formulation to minimize Binomial deviance
}
\examples{
# construct a low rank matrix in the logit scale
rows = 100
cols = 10
set.seed(1)
mat_logit = outer(rnorm(rows), rnorm(cols))

# generate a binary matrix
mat = (matrix(runif(rows * cols), rows, cols) <= inv.logit.mat(mat_logit)) * 1.0

# run logistic PCA on it
lpca = logisticPCA(mat, k = 1, M = 4, main_effects = FALSE)

# Logistic PCA likely does a better job finding latent features
# than standard PCA
plot(svd(mat_logit)$u[, 1], lpca$PCs[, 1])
plot(svd(mat_logit)$u[, 1], svd(mat)$u[, 1])
}

